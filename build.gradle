buildscript{
    ext{
        queryDslVersion="5.0.0"
        mapstructVersion = "1.4.2.Final"

        snippetsDir = file("build/generated-snippets") // restdocs
    } 
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.asciidoctor.jvm.convert' version "3.3.2"
    id 'com.google.osdetector' version '1.7.0'
}

group = 'boot3'
version = '1.0.0'



allprojects {
    apply plugin: 'java'
    apply plugin: 'application'
    sourceCompatibility = '17'
    targetCompatibility = '17'

    mainClassName = 'com.hotel.serverapi.ServerApiApplication'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }

        asciidoctorExtensions // Asciidoctor 의존그룹 지정 -> :asciidoctor task 실행시 내부적으로 그룹 지정
    }

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'



    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2022.0.1'
        }
    }


    dependencies {

        // hikari - connection pool 보완 (enterprise 환경용)
        implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'

        // mac용 netty 라이브러리 추가
        // web-client사용을 위한 mac arm에서는 native library를 호출할 수 없어 아래 내용을 추가하였음
        if (osdetector.arch.equals("aarch_64")){
            implementation "io.netty:netty-resolver-dns-native-macos:4.1.79.Final:osx-aarch_64"
        }


        compileOnly 'org.projectlombok:lombok'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        implementation "org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2"
        annotationProcessor 'org.projectlombok:lombok'
        implementation 'org.mariadb.jdbc:mariadb-java-client'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        //Querydsl 추가
        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"

        // openapi
        implementation 'org.springdoc:springdoc-openapi-starter-common:2.0.2'
        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

        // Mapstruct
        implementation "org.mapstruct:mapstruct:${mapstructVersion}"
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
        annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

        // validation
        implementation 'org.springframework.boot:spring-boot-starter-validation'

        // prometheus
        implementation 'io.micrometer:micrometer-registry-prometheus'

        // Spring RestDocs
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
        // mockmvc에 Spring REST Docs 추가를 위한 라이브러리
        asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
        testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'
        // *.adoc 파일의 {snippets}를 자동으로 설정

        // jwt
        // implementation 'io.jsonwebtoken:jjwt'


        // spring for grqphql
        implementation 'org.springframework.boot:spring-boot-starter-graphql'

        // DB 암호화
        implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

        implementation 'com.google.collections:google-collections:1.0'

    }
}

subprojects {
    group = 'hotel-java'
    version = '1.0.0'
    sourceCompatibility = '17'

}

jar {
    enabled = false
}

compileJava{
    dependsOn clean
}

// querydsl
def querydslSrcDir = 'src/main/generated'
sourceSets {
    main {
        java {
            srcDirs += [ querydslSrcDir ]
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
        }
    }
}

clean {
    delete file('src/main/generated')
}